import org.apache.tools.ant.filters.*

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.5.1"
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.github-pages'

group = 'org.wickedsource'
version = '1.0.0-SNAPSHOT'

ext {
    snippetsDir = file('build/generated-snippets')
}

processResources {
    filter ReplaceTokens, tokens: [
            "coderadar.version": version
    ]
}

test {
    outputs.dir snippetsDir

    useJUnit {
        // disable long-running integration tests by default
        excludeCategories 'org.wickedsource.coderadar.testframework.category.IntegrationTest'
    }
}

task integrationTest(type: Test) {
    useJUnit {
        includeCategories 'org.wickedsource.coderadar.testframework.category.IntegrationTest'
    }
}

task controllerTest(type: Test) {
    useJUnit {
        includeCategories 'org.wickedsource.coderadar.testframework.category.ControllerTest'
    }
}

asciidoctor {
    attributes 'snippets': snippetsDir,
            'version': version,
            'date': new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    inputs.dir snippetsDir
    dependsOn test
    sourceDir 'src/main/asciidoc'
    outputDir 'build/docs'
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-hateoas:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.4.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools:1.4.0.RELEASE'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.0.201509280440-r'
    compile 'commons-io:commons-io:2.4'
    compile 'io.fabric8:gitective-core:0.9.10'
    compile 'com.h2database:h2:1.4.191'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.hibernate:hibernate-core:5.2.3.Final'
    compile 'org.hibernate:hibernate-validator:5.2.4.Final'
    compile 'org.reflections:reflections:0.9.10'
    compile 'commons-fileupload:commons-fileupload:1.3'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1'

    compile project(':plugins:loc-analyzer-plugin')
    compile project(':plugins:checkstyle-analyzer-plugin')

    runtime 'mysql:mysql-connector-java:5.1.6'

    testCompile 'org.springframework.boot:spring-boot-starter-test:1.4.0.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-ext:1.7.21'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.0.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-core:1.1.0.RELEASE'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    testCompile 'org.dbunit:dbunit:2.5.2'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile 'org.assertj:assertj-core:3.5.1'

}

bootRun {
    jvmArgs =
            [
                    // debugging
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",

                    // logging
                    "-Dlogging.level.org.wickedsource.coderadar=DEBUG",
                    "-Dlogging.level.org.wickedsource.coderadar.job.JobLogger=INFO",
                    "-Dlogging.level.org.hibernate.SQL=ERROR",
                    "-Dlogging.level.org.hibernate.type=ERROR",
                    "-Dlogging.level.org.reflections=ERROR",
                    "-Dlogging.file=coderadar.log",

                    // coderadar settings for server instance
                    "-Dcoderadar.master=true",
                    "-Dcoderadar.slave=true",
                    "-Dcoderadar.scanIntervalInSeconds=30",
                    "-Dcoderadar.workdir=coderadar-workdir",
                    "-Dcoderadar.dateLocale=de_DE",

                    // hibernate
                    "-Dspring.jpa.hibernate.ddl-auto=create-drop",

                    // file based H2 datasource
//                    "-Dspring.datasource.url=jdbc:h2:file:C:/coderadar/database",
//                    "-Dspring.datasource.username=sa",
//                    "-Dspring.datasource.password=sa",
//                    "-Dspring.datasource.driverClassName=org.h2.Driver",

                    // MySQL datasource
                    "-Dspring.datasource.url=jdbc:mysql://localhost/coderadar",
                    "-Dspring.datasource.username=coderadar",
                    "-Dspring.datasource.password=coderadar",
                    "-Dspring.datasource.driver-class-name=com.mysql.jdbc.Driver",
                    "-Dspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect",
            ]
}

githubPages {
    repoUri = 'https://github.com/thombergs/coderadar.git'
    targetBranch = 'gh-pages'
    pages {
        from 'build/docs/html5'
        into "${version}/docs"
    }
}
