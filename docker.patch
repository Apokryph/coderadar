From aa7a85ea38db1807e70a27b8bd25adad1a507940 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Tue, 21 Jun 2016 22:33:26 +0200
Subject: [PATCH 1/9] added docker build for server component

---
 .gitignore                                         |  2 ++
 build.gradle                                       |  6 ++++-
 docker-compose.yml                                 |  4 ++++
 server/coderadar-webapp/build.gradle               | 27 +++++++++++++++++++++-
 server/coderadar-webapp/src/main/docker/Dockerfile | 13 +++++++++++
 5 files changed, 50 insertions(+), 2 deletions(-)
 create mode 100644 docker-compose.yml
 create mode 100644 server/coderadar-webapp/src/main/docker/Dockerfile

diff --git a/.gitignore b/.gitignore
index a60ec5c..b819ffc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,4 +3,6 @@
 *.iws
 .gradle
 *.iml
+*.ipr
 /plugins/findbugs-adapter-plugin/src/main/generated
+build
diff --git a/build.gradle b/build.gradle
index fded6aa..3daaf51 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,6 +2,10 @@ apply plugin: 'idea'

 version= '1.0.0-SNAPSHOT'

+ext {
+    dockerGroup = 'thombergs'
+}
+
 subprojects{
     apply plugin: 'idea'
     apply plugin: 'java'
@@ -38,4 +42,4 @@ task printClasspathForCoderadar {
     doLast {
         configurations.testRuntime.each { println it }
     }
-}
\ No newline at end of file
+}
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..4708203
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,4 @@
+coderadar:
+  image: "thombergs/coderadar:latest"
+  ports:
+    - "8080:8080"
diff --git a/server/coderadar-webapp/build.gradle b/server/coderadar-webapp/build.gradle
index 60ef0c0..553d2d9 100644
--- a/server/coderadar-webapp/build.gradle
+++ b/server/coderadar-webapp/build.gradle
@@ -4,6 +4,7 @@ buildscript {
     repositories {
         mavenCentral()
         mavenLocal()
+        jcenter()
         maven {
             url "https://plugins.gradle.org/m2/"
         }
@@ -12,12 +13,14 @@ buildscript {
     dependencies {
         classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.4.RELEASE")
         classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
+        classpath "se.transmode.gradle:gradle-docker:1.2"
     }
 }

 apply plugin: 'java'
 apply plugin: 'spring-boot'
 apply plugin: 'org.asciidoctor.convert'
+apply plugin: 'docker'

 group = 'org.wickedsource'
 version = '1.0.0.SNAPSHOT'
@@ -114,4 +117,26 @@ bootRun {
                     "-Dspring.datasource.password=coderadar",
                     "-Dspring.datasource.driver-class-name=com.mysql.jdbc.Driver",
             ]
-}
\ No newline at end of file
+}
+
+task buildDocker(type: Docker, dependsOn: build) {
+    push = false
+    tagVersion = 'latest'
+    tag = "${project.dockerGroup}/coderadar"
+
+    dockerfile = file('src/main/docker/Dockerfile')
+    doFirst {
+        copy {
+            from("${project.buildDir}/libs/") {
+                rename "${jar.baseName}-.*\\.jar", "${jar.baseName}.jar"
+            }
+            into stageDir
+            exclude '*.original'
+        }
+        copy {
+            from "${projectDir}/src/main/docker"
+            into stageDir
+            include 'application.properties'
+        }
+    }
+}
diff --git a/server/coderadar-webapp/src/main/docker/Dockerfile b/server/coderadar-webapp/src/main/docker/Dockerfile
new file mode 100644
index 0000000..6efd776
--- /dev/null
+++ b/server/coderadar-webapp/src/main/docker/Dockerfile
@@ -0,0 +1,13 @@
+FROM java:8
+
+MAINTAINER Matthias Balke <mathias.balke@googlemail.com>
+
+VOLUME /tmp
+
+ADD coderadar-webapp.jar app.jar
+
+RUN bash -c 'touch /app.jar'
+
+EXPOSE 8080
+
+ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]

From 4910b6039d1a5de3a4abe29b1fe98cd30985ae61 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Tue, 21 Jun 2016 22:34:27 +0200
Subject: [PATCH 2/9] made gradlew executable

---
 gradlew | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 mode change 100644 => 100755 gradlew

diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755

From d8c8d65b223909474d9848961d4d9a49c31e973d Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Tue, 21 Jun 2016 23:25:47 +0200
Subject: [PATCH 3/9] added circleci build file to build docker containers
 (closes #24)

---
 circle.yml                           | 56 ++++++++++++++++++++++++++++++++++++
 server/coderadar-webapp/build.gradle |  2 +-
 2 files changed, 57 insertions(+), 1 deletion(-)
 create mode 100644 circle.yml

diff --git a/circle.yml b/circle.yml
new file mode 100644
index 0000000..91362ff
--- /dev/null
+++ b/circle.yml
@@ -0,0 +1,56 @@
+machine:
+  java:
+    version: oraclejdk8
+  python:
+    version: 2.7.3
+
+  services:
+    - docker
+
+dependencies:
+  pre:
+    - sudo pip install docker-compose==1.5.2
+  cache_directories:
+    - "~/docker"
+
+  override:
+    - docker version
+    - docker info
+    - docker-compose version
+    - if [[ -e ~/docker/java.tar ]]; then docker load --input ~/docker/java.tar; fi
+
+    - ./gradlew --console=plain buildDocker
+
+    # pull image here to cache it and speed up the test
+    - docker images
+
+    - mkdir -p ~/docker
+    - docker save java:8 > ~/docker/java.tar
+
+  post:
+    - mkdir -p $CIRCLE_TEST_REPORTS/junit/
+    - find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;
+
+    - mkdir -p $CIRCLE_ARTIFACTS/build-artifacts
+    - cp -a server/coderadar-webapp/build/libs/coderadar-webapp-*.jar $CIRCLE_ARTIFACTS/build-artifacts/
+
+test:
+  pre:
+    - docker-compose up -d coderadar-server
+    - echo "waiting 50 seconds for applications to boot ..."; echo "50..."; sleep 10; echo "40..."; sleep 10; echo "30..."; sleep 10; echo "20..."; sleep 10; echo "10..."; sleep 10; echo "done.";
+
+  override:
+    - echo ">> REST API <<"; curl --retry 10 --retry-delay 5 -v http://localhost:8080/projects
+
+  post:
+    - echo "Running Docker containers"; docker ps -a
+    - echo "Stopping all Docker containers"; docker stop $(docker ps -a -q)
+    - mkdir -p $CIRCLE_TEST_REPORTS/docker/
+    - docker logs coderadar_coderadarserver_1 > $CIRCLE_TEST_REPORTS/docker/coderadar-server.log
+
+deployment:
+  hub:
+    branch: master
+    commands:
+      - if [ "$CIRCLE_PR_NUMBER" = ""  ]; then docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS; fi
+      - if [ "$CIRCLE_PR_NUMBER" = ""  ]; then docker push thombergs/coderadar-server; else echo 'Skipping Docker deployment for PRs!'; fi
diff --git a/server/coderadar-webapp/build.gradle b/server/coderadar-webapp/build.gradle
index 553d2d9..e8e83d6 100644
--- a/server/coderadar-webapp/build.gradle
+++ b/server/coderadar-webapp/build.gradle
@@ -122,7 +122,7 @@ bootRun {
 task buildDocker(type: Docker, dependsOn: build) {
     push = false
     tagVersion = 'latest'
-    tag = "${project.dockerGroup}/coderadar"
+    tag = "${project.dockerGroup}/coderadar-server"

     dockerfile = file('src/main/docker/Dockerfile')
     doFirst {

From 325a67001d65d7ed50c3fec8d01bccfb3064a0a6 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Tue, 21 Jun 2016 23:32:52 +0200
Subject: [PATCH 4/9] updated generated docs

---
 server/coderadar-webapp/doc/restapi/html5/index.html | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/server/coderadar-webapp/doc/restapi/html5/index.html b/server/coderadar-webapp/doc/restapi/html5/index.html
index 30baa62..64df0fc 100644
--- a/server/coderadar-webapp/doc/restapi/html5/index.html
+++ b/server/coderadar-webapp/doc/restapi/html5/index.html
@@ -590,7 +590,7 @@ <h4 id="_example_response"><a class="link" href="#_example_response">Example Res
 <div class="content">
 <pre class="highlightjs highlight nowrap"><code class="language-http" data-lang="http">HTTP/1.1 201 Created
 Content-Type: application/json;charset=UTF-8
-Content-Length: 313
+Content-Length: 300

 {
   "name" : "Testproject",
@@ -725,7 +725,7 @@ <h4 id="_example_response_2"><a class="link" href="#_example_response_2">Example
 <div class="content">
 <pre class="highlightjs highlight nowrap"><code class="language-http" data-lang="http">HTTP/1.1 200 OK
 Content-Type: application/json;charset=UTF-8
-Content-Length: 210
+Content-Length: 201

 {
   "filePatterns" : [ ],
@@ -771,7 +771,7 @@ <h4 id="_example_response_3"><a class="link" href="#_example_response_3">Example
 <div class="content">
 <pre class="highlightjs highlight nowrap"><code class="language-http" data-lang="http">HTTP/1.1 201 Created
 Content-Type: application/json;charset=UTF-8
-Content-Length: 446
+Content-Length: 429

 {
   "filePatterns" : [ {
@@ -855,7 +855,7 @@ <h4 id="_example_response_4"><a class="link" href="#_example_response_4">Example
 <div class="content">
 <pre class="highlightjs highlight nowrap"><code class="language-http" data-lang="http">HTTP/1.1 201 Created
 Content-Type: application/json;charset=UTF-8
-Content-Length: 262
+Content-Length: 252

 {
   "analyzerName" : "org.wickedsource.locAnalyzer",
@@ -904,7 +904,7 @@ <h2 id="_validation_errors"><a class="link" href="#_validation_errors">Validatio
 <div class="content">
 <pre class="highlightjs highlight nowrap"><code class="language-http" data-lang="http">HTTP/1.1 400 Bad Request
 Content-Type: application/json;charset=UTF-8
-Content-Length: 164
+Content-Length: 156

 {
   "fieldErrors" : [ {
@@ -962,7 +962,7 @@ <h2 id="_general_errors"><a class="link" href="#_general_errors">General Errors<
 </div>
 <div id="footer">
 <div id="footer-text">
-Last updated 2016-06-21 21:20:04 +02:00
+Last updated 2016-06-21 22:07:27 MESZ
 </div>
 </div>
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/styles/github.min.css">

From 417bb763ea7bae1eaba114dadc70e89fe0029fa3 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Wed, 22 Jun 2016 00:03:12 +0200
Subject: [PATCH 5/9] added gradle.d scripts

support for cd versioning without snapshots
generic java project settings
idea plugin bugfixes
externalized versions
made spring boot jar executable
---
 build.gradle                             | 17 ++++++---
 client/gradle-runner/build.gradle        |  4 +-
 gradle.d/15-circleci.gradle              | 41 +++++++++++++++++++++
 gradle.d/30-java.gradle                  | 34 +++++++++++++++++
 gradle.d/60-idea.gradle                  | 63 ++++++++++++++++++++++++++++++++
 gradle.properties                        |  8 ++++
 plugins/analyzer-plugin-api/build.gradle |  4 +-
 server/coderadar-webapp/build.gradle     | 20 +++++-----
 8 files changed, 170 insertions(+), 21 deletions(-)
 create mode 100644 gradle.d/15-circleci.gradle
 create mode 100644 gradle.d/30-java.gradle
 create mode 100644 gradle.d/60-idea.gradle
 create mode 100644 gradle.properties

diff --git a/build.gradle b/build.gradle
index 3daaf51..8deabbc 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,20 +1,25 @@
-apply plugin: 'idea'
+apply plugin: 'base'

-version= '1.0.0-SNAPSHOT'
+// alle Skripte aus ./gradle.d in sortierter Reihenfolge einbinden
+file('gradle.d').listFiles().sort().each {
+    if (it =~ /.*\.gradle$/) {
+        apply from: relativePath(it)
+    }
+}
+allprojects {
+    group = 'org.wickedsource'
+    version = getBuildVersion('1.0.0')
+}

 ext {
     dockerGroup = 'thombergs'
 }

 subprojects{
-    apply plugin: 'idea'
-    apply plugin: 'java'
 //    apply plugin: 'findbugs'
 //    apply plugin: 'jacoco'
 //    apply plugin: 'pmd'

-    sourceCompatibility = 1.8
-
     repositories {
         mavenCentral()
         mavenLocal()
diff --git a/client/gradle-runner/build.gradle b/client/gradle-runner/build.gradle
index e2a4ee0..c7ec643 100644
--- a/client/gradle-runner/build.gradle
+++ b/client/gradle-runner/build.gradle
@@ -1,5 +1,3 @@
-apply plugin: 'java'
-
 dependencies {
     compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
     compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
@@ -7,4 +5,4 @@ dependencies {
     testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.4.1'
     testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.4.1'
     testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.4.1'
-}
\ No newline at end of file
+}
diff --git a/gradle.d/15-circleci.gradle b/gradle.d/15-circleci.gradle
new file mode 100644
index 0000000..641f894
--- /dev/null
+++ b/gradle.d/15-circleci.gradle
@@ -0,0 +1,41 @@
+def getEnv(String envVarName, Object defaultValue) {
+
+    Map<String, String> env = System.getenv();
+    if (env.containsKey(envVarName)) {
+        return env.get(envVarName)
+    }
+
+    return defaultValue
+}
+
+boolean getBoolEnv(String envVarName, boolean defaultValue) {
+    Boolean.valueOf(getEnv(envVarName, defaultValue))
+}
+
+def getBuildVersion(String baseVersion) {
+    def version = baseVersion;
+
+    if (project.isCiBuild) {
+        if (project.isPullRequest) {
+            version += "-PR${project.pullRequestNumber}"
+        }
+        version += "-${project.buildNumber}"
+        version += "-${project.gitCommitShort}"
+
+    } else {
+        version += "-local"
+    }
+}
+
+ext {
+// reads environment variables when running on snap-ci.com
+    isCiBuild = getBoolEnv('CI', false)
+
+    buildNumber = getEnv('CIRCLE_BUILD_NUM', null)
+    gitCommit = getEnv('CIRCLE_SHA1', null)
+    pullRequestNumber = getEnv('CIRCLE_PR_NUMBER', null)
+    isPullRequest = pullRequestNumber != null
+
+    // export method as closure to make it available for all projects
+    getBuildVersion = this.&getBuildVersion
+}
diff --git a/gradle.d/30-java.gradle b/gradle.d/30-java.gradle
new file mode 100644
index 0000000..a9ba7b5
--- /dev/null
+++ b/gradle.d/30-java.gradle
@@ -0,0 +1,34 @@
+subprojects {
+
+    if (file('src/main/java').exists()) {
+        apply plugin: 'jacoco'
+        apply plugin: 'java'
+
+        repositories {
+            jcenter()
+        }
+
+        jacoco {
+            toolVersion = version_jacoco
+        }
+
+        compileJava {
+            sourceCompatibility = version_java
+            targetCompatibility = version_java
+
+            options.fork = true
+        }
+
+        test {
+            jacoco {
+                append = false
+                includes = [
+                        "org/wickedsource/**/*"
+                ]
+            }
+        }
+    } else {
+        apply plugin: 'base'
+    }
+
+}
diff --git a/gradle.d/60-idea.gradle b/gradle.d/60-idea.gradle
new file mode 100644
index 0000000..ab195a8
--- /dev/null
+++ b/gradle.d/60-idea.gradle
@@ -0,0 +1,63 @@
+allprojects {
+
+    apply plugin: 'idea'
+
+    idea {
+        module {
+            inheritOutputDirs = true
+            downloadJavadoc = false
+            downloadSources = true
+            outputDir = file('build/classes/main')
+            testOutputDir = file('build/classes/test')
+        }
+    }
+
+}
+
+idea {
+    project {
+        jdkName = version_java
+        languageLevel = '8'
+        vcs = 'Git'
+    }
+}
+
+
+subprojects {
+
+    if (plugins.hasPlugin("java")) {
+
+        idea.module.iml {
+            withXml {
+                // mark resource directories as such
+                // cf. https://discuss.gradle.org/t/the-idea-plugin-breaks-the-new-intellij-13-iml-configuration/2456/10
+                def sourceFolder = it.asNode().component.content.sourceFolder
+
+                def mainResourceFolder = sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
+                // in case there is no src/main/resources in this module
+                if (mainResourceFolder != null) {
+                    def atts = mainResourceFolder.attributes()
+                    atts.remove('isTestSource')
+                    atts.put('type', 'java-resource')
+                }
+
+                def testResourceFolder = sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/test/resources' }
+                // in case there is no src/test/resources in this module
+                if (testResourceFolder != null) {
+                    def atts = testResourceFolder.attributes()
+                    atts.remove('isTestSource')
+                    atts.put('type', 'java-test-resource')
+                }
+
+                // spring facet
+                def springFacet = '''<component name="FacetManager">
+                <facet type="Spring" name="Spring">
+                  <configuration />
+                </facet>
+              </component>'''
+
+                it.asNode().append((new XmlParser()).parseText(springFacet))
+            }
+        }
+    }
+}
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..81a00f1
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,8 @@
+# java
+version_java=1.8
+
+# spring boot
+version_springBoot=1.3.3.RELEASE
+
+# jacoco
+version_jacoco=0.7.1.201405082137
diff --git a/plugins/analyzer-plugin-api/build.gradle b/plugins/analyzer-plugin-api/build.gradle
index 5772a9d..153d55a 100644
--- a/plugins/analyzer-plugin-api/build.gradle
+++ b/plugins/analyzer-plugin-api/build.gradle
@@ -1,5 +1,3 @@
-apply plugin: 'java'
-
 dependencies {
     testCompile group: 'junit', name: 'junit', version: '4.11'
-}
\ No newline at end of file
+}
diff --git a/server/coderadar-webapp/build.gradle b/server/coderadar-webapp/build.gradle
index e8e83d6..bf54159 100644
--- a/server/coderadar-webapp/build.gradle
+++ b/server/coderadar-webapp/build.gradle
@@ -11,7 +11,7 @@ buildscript {
     }

     dependencies {
-        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.4.RELEASE")
+        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
         classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
         classpath "se.transmode.gradle:gradle-docker:1.2"
     }
@@ -22,9 +22,6 @@ apply plugin: 'spring-boot'
 apply plugin: 'org.asciidoctor.convert'
 apply plugin: 'docker'

-group = 'org.wickedsource'
-version = '1.0.0.SNAPSHOT'
-
 ext{
     snippetsDir = file('build/generated-snippets')
 }
@@ -62,10 +59,10 @@ jar {
 }

 dependencies {
-    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.3.3.RELEASE'
-    compile 'org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE'
-    compile 'org.springframework.boot:spring-boot-starter-hateoas:1.3.3.RELEASE'
-    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:1.3.3.RELEASE'
+    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
+    compile 'org.springframework.boot:spring-boot-starter-web'
+    compile 'org.springframework.boot:spring-boot-starter-hateoas'
+    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
     compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
     compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.1.0.201509280440-r'
     compile group: 'commons-io', name: 'commons-io', version: '2.4'
@@ -80,13 +77,18 @@ dependencies {

     runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'

-    testCompile 'org.springframework.boot:spring-boot-starter-test:1.3.3.RELEASE'
+    testCompile 'org.springframework.boot:spring-boot-starter-test'
     testCompile group: 'junit', name: 'junit', version: '4.11'
     testCompile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.21'
     testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.0.RELEASE'
     testCompile 'org.springframework.restdocs:spring-restdocs-core:1.1.0.RELEASE'
 }

+bootRepackage {
+    mainClass = 'org.wickedsource.coderadar.Coderadar'
+    executable = true
+}
+
 bootRun {
     jvmArgs =
             [

From 5bf88e1111f27ce594ec778a75c8b257430ac6ea Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Wed, 22 Jun 2016 00:06:02 +0200
Subject: [PATCH 6/9] fixed versioning

---
 gradle.d/15-circleci.gradle | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gradle.d/15-circleci.gradle b/gradle.d/15-circleci.gradle
index 641f894..527c678 100644
--- a/gradle.d/15-circleci.gradle
+++ b/gradle.d/15-circleci.gradle
@@ -20,7 +20,7 @@ def getBuildVersion(String baseVersion) {
             version += "-PR${project.pullRequestNumber}"
         }
         version += "-${project.buildNumber}"
-        version += "-${project.gitCommitShort}"
+        version += "-${project.gitCommit}"

     } else {
         version += "-local"

From 92990e80bb66eec8e8ec8b0c44b87e956a5e4880 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Wed, 22 Jun 2016 00:12:33 +0200
Subject: [PATCH 7/9] first step in fixing classname

---
 .../coderadar/core/WorkDirManager.java             | 44 ----------------------
 .../coderadar/core/WorkdirManager1.java            | 44 ++++++++++++++++++++++
 2 files changed, 44 insertions(+), 44 deletions(-)
 delete mode 100644 server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkDirManager.java
 create mode 100644 server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java

diff --git a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkDirManager.java b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkDirManager.java
deleted file mode 100644
index ae780f0..0000000
--- a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkDirManager.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.wickedsource.coderadar.core;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-import org.wickedsource.coderadar.CoderadarConfiguration;
-
-import java.nio.file.Path;
-
-/**
- * Centralizes the access to local working directories needed for some tasks.
- */
-@Service
-public class WorkdirManager {
-
-    private CoderadarConfiguration config;
-
-    @Autowired
-    public WorkdirManager(CoderadarConfiguration config) {
-        this.config = config;
-    }
-
-    /**
-     * Returns the path to the local GIT repository for the specified project. Creates the folder
-     * if it does not exist.
-     *
-     * @param projectId ID of the project for which to return the path.
-     * @return path to the local GIT repository of the specified project.
-     */
-    public Path getLocalGitRoot(Long projectId) {
-        Path workdir = config.getWorkdir().resolve("projects/" + projectId);
-        createDirIfNecessary(workdir);
-        return workdir;
-    }
-
-    private void createDirIfNecessary(Path workdir) {
-        if (!workdir.toFile().exists()) {
-            workdir.toFile().mkdirs();
-        }
-    }
-
-    private String timestamp() {
-        return String.valueOf(System.currentTimeMillis());
-    }
-}
diff --git a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java
new file mode 100644
index 0000000..b8382c7
--- /dev/null
+++ b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java
@@ -0,0 +1,44 @@
+package org.wickedsource.coderadar.core;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.wickedsource.coderadar.CoderadarConfiguration;
+
+import java.nio.file.Path;
+
+/**
+ * Centralizes the access to local working directories needed for some tasks.
+ */
+@Service
+public class WorkdirManager1 {
+
+    private CoderadarConfiguration config;
+
+    @Autowired
+    public WorkdirManager1(CoderadarConfiguration config) {
+        this.config = config;
+    }
+
+    /**
+     * Returns the path to the local GIT repository for the specified project. Creates the folder
+     * if it does not exist.
+     *
+     * @param projectId ID of the project for which to return the path.
+     * @return path to the local GIT repository of the specified project.
+     */
+    public Path getLocalGitRoot(Long projectId) {
+        Path workdir = config.getWorkdir().resolve("projects/" + projectId);
+        createDirIfNecessary(workdir);
+        return workdir;
+    }
+
+    private void createDirIfNecessary(Path workdir) {
+        if (!workdir.toFile().exists()) {
+            workdir.toFile().mkdirs();
+        }
+    }
+
+    private String timestamp() {
+        return String.valueOf(System.currentTimeMillis());
+    }
+}

From 43b03e4075fc6b5f9bddc4a91bc4329e050a5f01 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Wed, 22 Jun 2016 00:13:14 +0200
Subject: [PATCH 8/9] fixed WorkdirManager class name

---
 .../coderadar/core/WorkdirManager.java             | 44 ++++++++++++++++++++++
 .../coderadar/core/WorkdirManager1.java            | 44 ----------------------
 2 files changed, 44 insertions(+), 44 deletions(-)
 create mode 100644 server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager.java
 delete mode 100644 server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java

diff --git a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager.java b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager.java
new file mode 100644
index 0000000..ae780f0
--- /dev/null
+++ b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager.java
@@ -0,0 +1,44 @@
+package org.wickedsource.coderadar.core;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.wickedsource.coderadar.CoderadarConfiguration;
+
+import java.nio.file.Path;
+
+/**
+ * Centralizes the access to local working directories needed for some tasks.
+ */
+@Service
+public class WorkdirManager {
+
+    private CoderadarConfiguration config;
+
+    @Autowired
+    public WorkdirManager(CoderadarConfiguration config) {
+        this.config = config;
+    }
+
+    /**
+     * Returns the path to the local GIT repository for the specified project. Creates the folder
+     * if it does not exist.
+     *
+     * @param projectId ID of the project for which to return the path.
+     * @return path to the local GIT repository of the specified project.
+     */
+    public Path getLocalGitRoot(Long projectId) {
+        Path workdir = config.getWorkdir().resolve("projects/" + projectId);
+        createDirIfNecessary(workdir);
+        return workdir;
+    }
+
+    private void createDirIfNecessary(Path workdir) {
+        if (!workdir.toFile().exists()) {
+            workdir.toFile().mkdirs();
+        }
+    }
+
+    private String timestamp() {
+        return String.valueOf(System.currentTimeMillis());
+    }
+}
diff --git a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java b/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java
deleted file mode 100644
index b8382c7..0000000
--- a/server/coderadar-webapp/src/main/java/org/wickedsource/coderadar/core/WorkdirManager1.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.wickedsource.coderadar.core;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-import org.wickedsource.coderadar.CoderadarConfiguration;
-
-import java.nio.file.Path;
-
-/**
- * Centralizes the access to local working directories needed for some tasks.
- */
-@Service
-public class WorkdirManager1 {
-
-    private CoderadarConfiguration config;
-
-    @Autowired
-    public WorkdirManager1(CoderadarConfiguration config) {
-        this.config = config;
-    }
-
-    /**
-     * Returns the path to the local GIT repository for the specified project. Creates the folder
-     * if it does not exist.
-     *
-     * @param projectId ID of the project for which to return the path.
-     * @return path to the local GIT repository of the specified project.
-     */
-    public Path getLocalGitRoot(Long projectId) {
-        Path workdir = config.getWorkdir().resolve("projects/" + projectId);
-        createDirIfNecessary(workdir);
-        return workdir;
-    }
-
-    private void createDirIfNecessary(Path workdir) {
-        if (!workdir.toFile().exists()) {
-            workdir.toFile().mkdirs();
-        }
-    }
-
-    private String timestamp() {
-        return String.valueOf(System.currentTimeMillis());
-    }
-}

From 280e313d33c7aa0f06f3997b81c97a6074621a39 Mon Sep 17 00:00:00 2001
From: Matthias Balke <matthias.balke@gmail.com>
Date: Wed, 22 Jun 2016 00:20:45 +0200
Subject: [PATCH 9/9] fixed docker container names

---
 circle.yml         | 2 +-
 docker-compose.yml | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/circle.yml b/circle.yml
index 91362ff..9853ca4 100644
--- a/circle.yml
+++ b/circle.yml
@@ -46,7 +46,7 @@ test:
     - echo "Running Docker containers"; docker ps -a
     - echo "Stopping all Docker containers"; docker stop $(docker ps -a -q)
     - mkdir -p $CIRCLE_TEST_REPORTS/docker/
-    - docker logs coderadar_coderadarserver_1 > $CIRCLE_TEST_REPORTS/docker/coderadar-server.log
+    - docker logs coderadar_coderadar-server_1 > $CIRCLE_TEST_REPORTS/docker/coderadar-server.log

 deployment:
   hub:
diff --git a/docker-compose.yml b/docker-compose.yml
index 4708203..f672c45 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,4 +1,4 @@
-coderadar:
-  image: "thombergs/coderadar:latest"
+coderadar-server:
+  image: "thombergs/coderadar-server:latest"
   ports:
     - "8080:8080"